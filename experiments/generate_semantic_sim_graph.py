# Generates a graph based on semantic similarities between tokens
# This is done to compare the quality of graphs generated by a language model, vs sentence embeddings
# TODO: use similarity cutoffs rather than hardcoded number of connections
import argparse
import numpy as np
from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity
import json
import os

def load_vocab(path):
    with open(path, 'r') as f:
        return [line.strip() for line in f if line.strip()]

def generate_semantic_graph(vocab, model_name, max_connections):
    model = SentenceTransformer(model_name)
    
    embeddings = model.encode(vocab, show_progress_bar=False)
    
    similarity_matrix = cosine_similarity(embeddings)
    
    semantic_graph = {}
    for i, word in enumerate(vocab):
        similarities = similarity_matrix[i]
        
        sorted_indices = np.argsort(similarities)[::-1][1:max_connections+1]
        
        similar_words = [vocab[j] for j in sorted_indices]
        
        semantic_graph[word] = similar_words
    
    return semantic_graph

def main(in_path, model_name, max_connections):
    vocab = load_vocab(path=in_path)

    semantic_graph = generate_semantic_graph(vocab, model_name, max_connections)

    base_name = os.path.splitext(os.path.basename(in_path))[0]
    out_path = f"{base_name}_semantic_M{model_name.replace('-', '_')}_C{max_connections}.json"

    with open(out_path, 'w') as f:
        json.dump(semantic_graph, f)
    
    print(f"Semantic graph saved to {out_path}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Generate a graph based on semantic similarities between tokens.")
    parser.add_argument("in_path", type=str, help="Path to the input vocabulary file")
    parser.add_argument("--model_name", type=str, default='all-MiniLM-L6-v2', help="Name of the sentence transformer model to use")
    parser.add_argument("--max_connections", type=int, default=12, help="Maximum number of connections per word")
    
    args = parser.parse_args()
    
    main(args.in_path, args.model_name, args.max_connections)